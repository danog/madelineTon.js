import {
    one,
    sub,
    str2bigInt,
    greater,
    equals
} from "leemon"

const twoe1984 = str2bigInt("010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 16)
const twoe2047 = str2bigInt("80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 16)
const twoe2048 = str2bigInt("0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 16)
const twozerotwosixone = str2bigInt("4f25", 16)
const zeroeight = str2bigInt("80000000", 16)

const goodPrime = str2bigInt("c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b", 16)
/**
 * Check validity of G
 * @param {leemonBigInt} G Hex g_*
 * @param {leemonBigInt} p Hex prime
 */
const checkG = (G, p) => {
    if (!greater(G, one) || !greater(sub(p, one), G)) {
        throw new Error('G is invalid (1 < g_a < p - 1 is false).')
    }
    if (!greater(G, twoe1984) || !greater(sub(p, twoe1984), G)) {
        throw new Error('G is invalid (2^1984 < g_a < p - 2^1984 is false).')
    }
}
/**
 * Check validity of prime
 * @param {leemonBigInt} p Hex prime
 * @param {leemonBigInt} g Hex generator
 */
const checkPG = (p, g) => {
    if (!equals(p, goodPrime)) {
        throw new Error('Is bad prime.')
    }
    if (!greater(g, one) || !greater(sub(p, twoe1984), g)) {
        throw new Error('g is invalid (1 < g < p - 1 is false).')
    }
}
/**
 * Check validity of diffie hellman parameters
 * @param {*} p Hex prime
 * @param {*} g Hex generator
 * @param {*} G_ Hex generated
 */
const checkAll = (p, g, G_) => checkPG(p, g) && checkG(G_, p)
export {
    checkAll,
    checkG,
    checkPG
}